* Python Note
** 单下划线和双下划线

 + __foo__: 前后双下划线, 一种约定, python 内部的名字, 用于区别其他用户自定义的名字, 以防冲突.
 + ＿foo: 单下划线开头, 一种约定, 程序员用来指定变量私有的一种方式, 可以被外部访问, 但请视为私有变量.
 + __foo: 双下划线开头, 无法从类外部访问, 因为 python 解析器用_classname__foo 来代替这个名字, 仍然可以通过_classname__foo 访问.

 总的来说, python 无法阻止你访问任何类的变量.

** 函数参数
   参数定义顺序: 必选参数, 默认参数, 可变参数, 命名关键字参数和关键字参数.

#+BEGIN_SRC python
  def f1(a, b, c=0, *args, **kw):
      print('a = ', a, 'b = ', b, 'c = ', c, 'args = ', args, 'kw = ', kw)

  def f2(a, b, c=0, *, d, **kw):
      print('a = ', a, 'b = ', b, 'c = ', c, 'd = ', d, 'kw = ', kw)
#+END_SRC

** __new__和__init__的区别
  + __new__: 是一个静态方法, 负责创建一个类的实例.
  + __init__: 是一个实例方法, 负责初始化一个类的属性.

** 协程(coroutine)
   简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,
   而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.

   
** 闭包(Closure)
   当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下, 创建一个闭包必须满足以下几点:
   + 必须有一个内嵌函数
   + 内嵌函数必须引用外部函数中的变量
   + 外部函数的返回值必须是内嵌函数

   当函数运行完后,instance 并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.

** 多线程编程

** is(), type()和 isinstance()
   is()判断依据是内存, 判断是否同一对象(object).
   后两者都可用于判断类型, 但后者能判断是否子类.

