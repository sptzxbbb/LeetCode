* Web Note
** 分层
  + 应用层
  + 传输层
  + 网络层
  + 链接层
  + 实体层

** 物理层(Physical Layer)
*** 功能定义
   规定网络的电气特性,负责传输 01 电信号.

** 数据链路层(Link Layer)
*** 功能定义
    规定 01 的分组方式

*** 以太网(Ethernet)协议
    一组电信号构成一个数据包, 称为 *Frame* 帧.
    每一帧分成两部分: 标头(Head)和数据(Data).
    标头, 18 字节, 包括发送者,接受者,数据类型等信息.
    数据, 最短为 46 字节, 最长为 1500 字节.
    因此一帧的大小介于 64 到 1518 字节, 如果数据很多,需要分割成多个帧发送.

*** MAC 地址
    网卡出厂时候都有独一无二的 MAC 地址,长度为 48 个二进制位, 通常用 12 个十六进制数表示.
    前 6 个十六进制数是厂商编号,后 6 个是网卡流水编号.

*** 广播
    发送方通过 ARP 协议, 得知接收方的 MAC 地址.
    以太网不把数据准确送到接收方, 而是向本网络内所有计算机发送, 让接收到帧的计算机判断自己是否为接收方,
    这种方式叫做广播(Broadcasting)

** 网络层(Network Layer)
*** 功能定义
    依靠 MAC 确实可以找到接受者的网卡所在.
    但是, 以太网用广播方式, 不仅效率低, 而且局限在发送者的子网络里面, 如果不在子网, 广播是发不过去的.
    因此必须找到一个方法, 区分哪些 MAC 地址属于同一个子网络, 那些不是.
    如果在同一个自网络, 采用 *广播* 方式发送; 否则采用 *路由* 发送到接收方的子网络, 再进行 *广播*. 
    这导致了网络层的诞生, 它引进一套新的地址方式, 使得我们能够区分不同的计算机是否属于同一个子网络, 这套地址叫做 *网络地址*, 简称 *网址*.
    因此, 网络层出现以后, 每台计算机有了两个地址, *MAC 地址*, *网络地址*, 他们之间没有关联, 
    前者是厂商绑定在网卡上的, 后者是网络管理员分配, 他们只是随机组合在一起.
    逻辑上可以推定, 我们必定先处理网络地址, 然后再处理 MAC 地址.
    网络层的功能, 就是建立起主机到主机的通信.

*** IP 协议
    目前广泛使用的是 IP 协议第 4 版, 简称 IPv4.
    这个版本规定, 网络由 32 个二进制位组成.
    从 0.0.0.0 到 255.255.255.255

    IP 地址分成两部分, 前一部分代表网络, 后一部分代表主机号. 属于同一个子网络的计算机拥有相同的网络部分.
    但 IP 地址本身无法说明自身哪一部分是网络, 哪一部分是主机号, 因此我们增加了一个 *子网掩码(subnet mask)* 的 IP 地址参数来辅助区分.
    子网掩码形式上与 IP 地址相同, 也是 32 位二进制数字, 网络部分全部为 1, 主机部分为 0.
    比如, IP 地址 172.16.254.1, 如果已知网络是前 24 位, 主机是后 8 位, 其子网掩码是 255.255.255.0
    拥有两个电脑的子网掩码和 IP 地址, 我们就能判断他们是否处在同一个子网络中.

    总结, IP 协议作用主要有两个, 一个是为每一台计算机分配 IP 地址, 另一个是确定哪些地址在同一个子网络内.

*** IP 数据包
    根据 IP 协议发送的数据, 叫做 IP 数据包, 不难想象, 其中必定包含 IP 地址信息.
    IP 数据包会直接放入以太网数据包的数据(Data)部分, 因此不用修改以太网的规格,这是互联网分层的好处,
    上层变动完全不影响下层的结构.

    IP 数据包也分为 *标头(Header)* 和 *数据(Data)*.

    *标头* 主要包括 IP 版本, 数据长度, IP 地址等信息, *Data* 则是 IP 数据包的具体内容.

    标头部分长度为 20 到 60 字节, 整个 IP 数据包最大总长度为 65535 字节, 超过了以太网数据包的最大长度.
    因此往往一个 IP 数据包需要分割成几个以太网数据包来分开发送.

*** ARP 协议
    通常情况下, 发送方只知道接收方的 IP 地址, 而不知道 MAC 地址.
    因此当 IP 数据包发送到接受者的子网络时候, 我们需要确定接受者的 MAC 地址, 需要一种机制, 能够从 IP 地址得到 MAC 地址.
    这里分两种情况, 第一种, 两者不在同一个子网络中, 无法得到对方 MAC 地址, 只能把数据包送到对方子网络的 *网关*,
    让网关来操心这个问题; 第二种, 如果两者在同一个子网络里, 那么我们可以用 ARP 协议, 来获得对方的 MAC 地址.
    ARP 协议发出一个数据包, 其中包含它所要查询的主机 IP 地址, 在对方的 MAC 地址这一栏, 甜的是 FF:FF:FF:FF:FF:FF, 表明这是一个广播地址,
    发送给子网络的所有主机. 接收到这个数据包的主机, 从中取出 IP 地址, 与自身 IP 作比较, 如果相同则发出包含自身 MAC 地址的数据包做出回复, 
    否则丢弃这个包.
    总之, ARP 协议让我们可以得到同一个子网络内的主机 MAC 地址, 然后我们就可以把数据包发送到子网络的任意一台主机.

** 传输层(Transport Layer)
*** 功能定义
    有了 MAC 和 IP 地址之后, 我们已经可以在互联网上任意两台主机建立通信.
    但问题是, 主机上使用网络的程序往往不止一个, 当接受一个数据包时候, 我们如何确定它是浏览器网页的数据包, 还是聊天软件的数据包.
    因此我们需要一个新的参数, 来表示数据包的程序归属问题. 这个参数叫做 *端口(Port)*, 它其实是每一个使用网卡的程序的编号,
    每个数据包发送到主机的特定端口, 数据包就能分发到正确的程序上.

    端口是一个 16 个二进制为的整数, 介于[0, 65535], 0 到 1023 端口被系统所占用, 其余端口供用户使用. 需要使用网络的应用程序会随机选用一个
    端口, 然后与服务器的相应端口联系.

    *传输层* 的功能就是建立起端口到端口的通信, 只要确定了主机和端口, 程序之间的交流就能够实现.
    因此, Unix 系统把主机+端口, 称作 *套接字(Socket)*.

*** UDP 协议
    现在, 我们必须在数据包中加入端口信息, 这需要新的协议来做出规范. 最简单的实现叫做 UDP 协议, 它的格式几乎就是在数据前面, 加上端口号.
    UDP 数据包, 也包括 *标头* 和 *数据*.
    标头部分主要定义了发出端口和接受端口, 数据部分是具体的内容.
    标头总过只有 8 个字节, 数据包总长度不超过 65535 字节, 正好放进一个 IP 数据包.

*** TCP 协议
    UDP 协议的优点是简单,容易实现,但可靠性较差, 一个发出数据包, 无法确认对方是否收到.
    为了解决这个问题, 提高网络可靠性, TCP 协议诞生了.
    TCP 协议每发出一个数据包都要求对方确认, 如果有一个数据包没有受到确认, 发出方就知道这个数据包丢失了, 需要重发.
    因此, TCP 协议可以确保数据不会遗失, 缺点是复杂, 实现困难, 消耗较多网络资源.
    TCP 数据包长度没有限制, 理论上无限长, 但为了保证效率, 通常 TCP 数据包的长度不会超过 IP 数据包的长度, 确保单个 TCP 数据包不必再分割.

** 应用层(Application Layer)
*** 功能定义
    应用层接收到传输层的数据, 接下来就要进行解析数据. 由于互联网的开放框架, 数据五花八门, 必须事先规定好格式, 否则无法解读.
    应用层的作用,就是规定应用程序的数据格式.

* TCP 协议详解
** 三次握手和四次挥手
** 超时重新发送
   + RTO(retransmission timeout), 统计 RTT 来动态决定合理的 RTO.
   + RTT(round trip time), 往返时间
** 快速重传(Fast retransmission)
   接收到三个重复的 ACK 时候, 马上重传对应的片段.
   快速重新发送机制利用重复的 ACK 来提示 *空洞* 的存在.
   当重复次数达到阈值时，认为空洞对应的片段在网络中丢失.
   快速重新发送机制提高了检测丢失片段的效率,往往可以在超时之前探测到丢失片段,并重复发送丢失的片段.
** 流量控制(Traffic Control)
** 堵塞控制(Congestion Control)
*** 慢启动(Slow Start)
*** 堵塞避免(Congestion Avoidance)

* IP 协议
** 广播与多播

** ABCD 类地址
   + A: 0 网络号(7 位) 24 位主机号 [1.0.0.0, 126.0.0.0]
   + B: 10 网络号(14 位) 16 位主机号 [128.0.0.0, 191.255.255.255]
   + C: 110 网络号(21 位) 8 位主机号 [192.0.0.0, 223.255.255.255]
   + D: 1110 多播组号(28 号),
   + E: 11110 留待后用(27 位)

   全零(0.0.0.0)地址对应当前主机, 全一(255.255.255.255)是当前子网的广播地址.

* HTTP 协议
** 0.9
   1991 年发布, 该版本极其简单, 只有一个 *GET* 命令.

   协议规定,服务器只能回应 HTML 格式的字符串,不能回应别的格式.

   服务器发送完毕, 就关闭 TCP 连接.

** 1.0
   1996 年发布. 引入了 *POST* 和 *HEAD* 命令, 丰富了浏览器和服务器的互动手段.
   同时, request 和 response 的格式也变了, 除了数据部分, 每次通信必须包括头信息.

** 1.1
   1997 年发布.加入了持久连接和管道机制等特点.

** 2.0

* DNS
  DNS 是一个分布式数据库, 记录 Resource records(RR)
  RR format: (name, value, type, ttl)
** Type=A
   + name is hostname
   + value is IP address
** Type=NS(Name Server)
   + name is domain
   + value is hostname of authoritative name server for this domain
** Type=CNAME
   + name is alias name
   + value is the real name
** Type=MX
   + value is name of mailserver associated with name



