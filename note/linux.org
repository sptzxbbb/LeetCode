* 文件描述符(File descriptor)
  文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表, 该表称为描述符表(descriptor table)。
  当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。
  在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。
  但是文件描述符这一概念往往只适用于 UNIX、Linux 这样的操作系统。

* inode(索引节点)
** 简介
  文件储存在硬盘上, 硬盘的最小存储单位叫做扇区(Sector, 0.5KB), 多个扇区组成块(Block, 一般为 4k).
  操作系统以块为单位读取硬盘.

  一个文件使用一个 inode(索引节点), inode 中记录文件的元信息. 
  inode 的数目和本身的大小在格式化时指定, 因此文件系统所能建立的文件数目是有限制的.
  
  inode 包含:
  + inode 编号
  + 文件类型
  + 文件的字节数
  + 拥有者的 Group ID
  + 文件的 Group ID
  + 读写权限
  + 时间戳, 一个三个
    + ctime, 指 inode 上一次变动的时间.
    + mtime, 指文件内容上一次变动的时间.
    + atime, 指文件上一次打开的时间.
    + 链接数, 有多少个文件名指向这个 inode(硬链接的数量)
  + 文件 block 的位置.

  用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：
  1. 首先，系统找到这个文件名对应的 inode 号码；
  2. 其次，通过 inode 号码，获取 inode 信息；
  3. 最后，根据 inode 信息，找到文件数据所在的 block，读出数据。

  文件名与 inode 的映射关系实际上是保存在目录项中，目录（directory）也是一种文件，
  文件内容是该目录下的文件名以及该文件名对应的 inode 号码。

** 硬链接和软链接
   硬链接源文件与目标文件的 inode 号码相同，都指向同一个 inode。inode 信息中有一项叫做”链接数”，记录指向该 inode 的文件名总数，这时就会增加 1。
   删除一个文件名，就会使得 inode 节点中的”链接数”减 1。当这个值减到 0，表明没有文件名指向这个 inode，系统就会回收这个 inode 号码，以及其所对应 block 区域。 
   软链接源文件的内容是目标文件的路径。读取软连接文件时，系统会自动将访问者导向目标文件。如果删除了目标文件，打开软连接文件时就会报错：”No such file or directory”。

