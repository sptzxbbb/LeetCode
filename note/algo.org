* 判断一个数在内存中的 1 的位数
  假设存在一个数 a, 则 a-1 的二进制必然比 a 的二进制少一个 1.
  因此只需要不断 a &= a-1, 直至 a 等于 0 为止, 求出 counter 即可.

* 取出一个数二进的最后一个 1
  a = a & (a ^ (a - 1))

* 寻找最小的 K 个数
  + 排序(n*logn)
  + 最大堆和最小堆, O(n*logk)
  + partition 算法, O(n)

* Two Sum
  + 排序, 二分查找, 时间:O(NlogN + NlogN)
  + hash, 时间: O(N), 空间 O(N)
  + 排序, 双指针, 时间:O(NlogN + N)

* 最大连续子数组和
  sum[0] = a[0]
  sum[i] = max(sum[i - 1] + a[i], a[i])
  maxSum = max(sum[i], maxSum)

* 最长公共子序列
  dp[i][j]: a[:i]和 b[:j]之间的最长公共子序列

  dp[1][1] = same(1, 1)
  dp[i][j] = max(dp[i - 1][j - 1]+ same(i, j), f[i - 1][j], f[i][j - 1])

  
* 硬币面值
  dp[i][sum]: 前 i 中硬币组成 sum 的组合数目.

  dp[i][0] = 1
  dp[i][sum] = sum(dp[i - 1][sum - k * v[i]]) (sum - k*v[i] >= 0)

* 最长子串
  f[i, j] = f[i - 1, j - 1] + 1 (A[i]==B[j])
  f[i, j] = 0 (otherwise)


* 最长回文子串

* 排列组合
  从 n 个元素中取出 m 个元素进行排列/组合.
** 组合
   一个位图数组标记每个元素状态, 取/不取. DFS 即可.

** 排列
   
